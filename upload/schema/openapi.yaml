openapi: "3.0.0"
info:
  version: "0.1"
  title: "arXiv File Management Service"
  contact:
    name: "arXiv API Team"
    email: nextgen@arxiv.org
  license:
    name: MIT
paths:
  /upload:
    post:
      operationId: uploadPackage
      summary: |
        Upload a new file or package (e.g. an arXiv submission source package).
        This initiates processing and sanitization, which must complete before
        the resource is fully created and available. The short-lived identifier
        for this task is created, and can be used to poll the status endpoint.
      requestBody:
        content:
          application/gzip:
            schema:
              type: string
              format: binary
      responses:
        '202':
          description: The upload has been accepted for processing.
          headers:
            Location:
              description: Status endpoint for the upload.
              schema:
                type: "string"
  /status/{task_id}:
    get:
      operationId: getUploadStatus
      description: |
        Provides information about the processing status of the upload.
      parameters:
        -in: path
         name: task_id
         description: Unique identifier for the upload processing task.
         required: true
         schema:
           type: string
      responses:
        '200':
          description: |
            If the processing task has not completed successfully, describes
            the current state of the process and other details.
          content:
            application/json:
              schema:
                $ref: 'resources/uploadStatus.json'
        '303':
          description: |
            Processing has completed successfully, and the client should visit
            the upload status endpoint.
          headers:
            Location:
              description: Location of the upload endpoint.
              schema:
                type: "string"
  /upload/{upload_id}:
    get:
      operationId: getUploadResult
      description: |
        Retrieve metadata about an accepted and processed upload package.
      parameters:
        -in: path
         name: upload_id
         description: Unique long-lived identifier for the upload.
         required: true
         schema:
           type: string
      responses:
        '200':
          description: A description of the upload package.
          content:
            application/json:
              schema:
                $ref: 'resources/uploadResult.json'

  /upload/{upload_id}/content:
    get:
      operationId: getUploadContent
      description: Retrieve the sanitized/processed upload package.
      parameters:
        -in: path
         name: upload_id
         description: Unique long-lived identifier for the upload.
         required: true
         schema:
           type: string
      responses:
        '200':
          description: Returns the sanitized/processed upload package.
