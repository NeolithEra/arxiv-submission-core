openapi: "3.0.0"
info:
  version: "0.1"
  title: "arXiv Submission API"
  description: "A RESTful API for arXiv submissions."
  contact:
    name: "arXiv API Team"
    email: nextgen@arxiv.org
  license:
    name: MIT
servers:
  - url: https://submit.arxiv.org
paths:
  /submit/:
    get:
      operationId: getServiceRoot
      description: |
        Describes the state of the submission API, and available methods.
      responses:
        '200':
          description: |
            Information about the submission API, including routes to submit
            and poll.
    post:
      operationId: createSubmission
      summary: |
        Create a new submission, and update with service annotations, metadata,
        and/or source files.
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'resources/submission.json'
      responses:
        '202':
          description: The submission payload has been accepted for deposit.
          headers:
            Location:
              description: Status endpoint for the new submission.
              schema:
                type: "string"
  /submit/{id}/:
    parameters:
      - in: path
        name: id
        description: |
          Unique submission ID returned upon createSubmission. This will
          likely, but not necessesarily, look like an integer.
        required: true
        schema:
          type: string
    get:
      description: |
        Get the current state of the submission, including procedural
        and descriptive metadata.
      operationId: getSubmission
      responses:
        '200':
          description: |
            Procedural and descriptive metadata about the submission resource,
            including its current state in the submission process.
          content:
            application/json:
              schema:
                $ref: 'resources/submission.json'
    post:
      description: |
        Update the submission with procedural and descriptive metadata. Include
        data only for fields which should be updated.
      operationId: updateSubmission
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'resources/submission.json'
      responses:
        '200':
          description: The submission has been updated.
          content:
            application/json:
              schema:
                $ref: 'resources/submission.json'
  /submit/{id}/history/:
    parameters:
      - in: path
        name: id
        description: |
          Unique submission ID returned upon createSubmission. This will
          likely, but not necessesarily, look like an integer.
        required: true
        schema:
          type: string
    get:
      description: |
        Get the event log for a submission. This will include only events that
        the user/client is authorized to view.
      operationId: getSubmissionHistory
      responses:
        '200':
          description: |
            Event log for the submission. This will include only events that
            the user/client is authorized to view.
          content:
            application/json:
              schema:
                $ref: 'resources/log.json'
  /submit/{id}/history/{event_id}/:
    parameters:
      - name: id
        in: path
        description: |
          Unique submission ID returned upon createSubmission. This will
          likely, but not necessesarily, look like an integer.
        required: true
        schema:
          type: string
      - name: event_id
        in: path
        description: |
          Unique ID for the submission event.
        required: true
        schema:
          type: string
    get:
      description: Get data for a submission event.
      operationId: getSubmissionEvent
      responses:
        '200':
          description: |
            Event data for the submission event.
          content:
            application/json:
              schema:
                $ref: 'resources/event.json'
  /submit/{id}/webhooks/:
    parameters:
      - name: id
        in: path
        description: |
          Unique submission ID returned upon createSubmission. This will
          likely, but not necessesarily, look like an integer.
        required: true
        schema:
          type: string
    get:
      description: |
        Get information about registered webhooks for a submission.
      operationId: getSubmissionWebhooks
      responses:
        '200':
          description: |
            Information about all registered webhooks for the submission for
            which the user/client is responsible.
          content:
            application/json:
              schema:
                $ref: 'resources/webhooks.json'
    post:
      description: |
        Register a new webhook for a submission.
      operationId: createSubmissionWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'resources/webhook.json'
      responses:
        '201':
          description: Webhook has been created successfully
          headers:
            Location:
              description: Status endpoint for the new webhook.
              schema:
                type: "string"
  /submit/{id}/webhooks/{webhook_id}/:
    parameters:
      - name: id
        in: path
        description: |
          Unique submission ID returned upon createSubmission. This will
          likely, but not necessesarily, look like an integer.
        required: true
        schema:
          type: string
      - name: webhook_id
        in: path
        description: Unique identifier for a registered submission webhook.
        required: true
        schema:
          type: string
    get:
      description: |
        Get information about a specific registered webhook for a submission.
      operationId: getSubmissionWebhook
      responses:
        '200':
          description: |
            Information about a specific registered webhook for the
            submission.
          content:
            application/json:
              schema:
                $ref: 'resources/webhook.json'
    post:
      description: |
        Update the webhook for a submission. May be a partial update.
      operationId: updateSubmissionWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'resources/webhook.json'
      responses:
        '200':
          description: Webhook has been updated successfully
          content:
            application/json:
              schema:
                $ref: 'resources/webhook.json'
    put:
      description: |
        Replace a webhook for a submission.
      operationId: replaceSubmissionWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'resources/webhook.json'
      responses:
        '200':
          description: Webhook has been replaced successfully
          content:
            application/json:
              schema:
                $ref: 'resources/webhook.json'
    delete:
      description: Remove a webhook for the submission.
      operationId: deleteSubmissionWebhook
      responses:
        '200':
          description: Webhook has been deleted successfully.
          content:
            application/json:
              schema:
                $ref: 'resources/webhook.json'
