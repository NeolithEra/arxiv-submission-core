openapi: "3.0.0"
info:
  version: "0.1"
  title: "arXiv Compilation Service"
  contact:
    name: "arXiv API Team"
    email: nextgen@arxiv.org
  license:
    name: MIT
paths:
  /compile:
    post:
      operationId: compile
      summary: Request compilation of an upload package.
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'resources/compilationRequest.json'
      responses:
        '202':
          description: |
            The upload has been accepted for compilation. A compilation
            task will have been generated, with a corresponding short-lived
            task ID. That task ID can be used to check the status of the
            compilation task, which will eventually redirect to the created
            compilation resource if the task completes successfully.
          headers:
            Location:
              description: Status endpoint for the compilation task.
              schema:
                type: "string"
  /status/{task_id}:
    get:
      operationId: getCompilationStatus
      description: |
        Provides information about the status of the compilation task.
        If the task has completed successfully, the response will be a redirect
        to the compilation result.
      parameters:
        -in: path
         name: task_id
         description: Unique short-lived identifier for the compilation task.
         required: true
         schema:
           type: string
      responses:
        '200':
          description: |
            Describes the current state of the process and other details.
          content:
            application/json:
              schema:
                $ref: 'resources/compileStatus.json'
        '303':
          description: |
            Compilation has completed successfully, and the client should visit
            the compilation status endpoint.
          headers:
            Location:
              description: Location of the compile endpoint.
              schema:
                type: "string"
  /compile/{compile_id}:
    get:
      operationId: getCompilationResult
      description: |
        Retrieve information about the result of the compilation process.
      parameters:
        -in: path
         name: compile_id
         description: Unique long-lived identifier for the compilation result.
         required: true
         schema:
           type: string
      responses:
        '200':
          description: |
            Information about the compile result, including URIs for
            the compile products (e.g. PDF, DVI, log output).
          content:
            application/json:
              schema:
                $ref: 'resources/compilationResult.json'
  /compile/{compile_id}/pdf:
    get:
      operationId: getPDF
      description: Retrieve the PDF output of the compilation process.
      parameters:
        -in: path
         name: compile_id
         description: Unique identifier for the compile.
         required: true
         schema:
           type: string
      responses:
        '200':
          content:
            application/pdf:
              schema:
                type: string
                format: binary
  /compile/{compile_id}/dvi:
    get:
      operationId: getDVI
      description: Retrieve the DVI output of the compilation process.
      parameters:
        -in: path
         name: compile_id
         description: Unique identifier for the compile.
         required: true
         schema:
           type: string
      responses:
        '200':
          content:
            application/x-dvi:
              schema:
                type: string
                format: binary
  /compile/{compile_id}/ps:
    get:
      operationId: getPS
      description: Retrieve the Postscript output of the compilation process.
      parameters:
        -in: path
         name: compile_id
         description: Unique identifier for the compile.
         required: true
         schema:
           type: string
      responses:
        '200':
          content:
            application/postscript:
              schema:
                type: string
                format: binary
  /compile/{compile_id}/log:
    get:
      operationId: getLog
      description: Retrieve the log output of the compilation process.
      parameters:
        -in: path
         name: compile_id
         description: Unique identifier for the compile.
         required: true
         schema:
           type: string
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
                format: binary
