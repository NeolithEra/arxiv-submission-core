"""
Orchestrates backend processes based on rules triggered by submission events.

The submission agent serves as a loosely-coupled manifold for running a variety
of asynchronous backend processes at specific moments during the submission
and moderation process. It is comprised of two components:

The consumer
============
A Kinesis Stream consumer that subscribes to submission events. Events may
be generated by submission user interfaces, APIs, and backend components
that leverage the ``arxiv.submission`` core package. As events are consumed,
they are evaluated against a set of registered :mod:`.rules`, which map event
types and conditions to :class:`.process`es defined in this application.

Consequent processes are not run in the consumer application, which is run in a
single thread. The consumer tries to move on as quickly as possible, so it uses
the :class:`.AsyncProcessRunner` to dispatch processes for parallel execution
by the worker.

The worker
==========
The worker is a Celery application that scales horizontally to run
:class:`.Process`es dispatched by the consumer. Processes are divided into
smaller steps that are run in series. Keeping steps small makes the overall
process more fault-tolerant; if a step fails for some reason (e.g. worker
crashes, meteor strike), it can be retried without discarding expensive results
from previous steps.

"""
from . import process, rules, runner, consumer


# Prepare all Process types for asynchronous execution.
for process_type in process.Process.__subclasses__():
    runner.AsyncProcessRunner.prepare(process_type)
